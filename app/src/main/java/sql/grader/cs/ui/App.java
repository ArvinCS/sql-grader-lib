/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sql.grader.cs.ui;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.UUID;

import com.fasterxml.jackson.databind.ObjectMapper;

public class App {
    public static String createIsolatedSchemaAndUser(Connection connection) throws SQLException {
        // Generate a random schema and user name (e.g., "student_session_<UUID>")
        String uuid = UUID.randomUUID().toString().replace("-", "_");
        String schemaName = "student_session_" + uuid;
        String userName = "student_user_" + uuid;
        
        // Create schema and user
        String createSchemaSQL = "CREATE SCHEMA " + schemaName;
        String createUserSQL = "CREATE ROLE " + userName + " WITH LOGIN PASSWORD 'password'";

        // Create the user and schema
        try (Statement stmt = connection.createStatement()) {
            stmt.executeUpdate(createSchemaSQL);
            stmt.executeUpdate(createUserSQL);
            
            // Grant permissions to the user
            stmt.executeUpdate("GRANT USAGE ON SCHEMA " + schemaName + " TO " + userName);
            stmt.executeUpdate("GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA " + schemaName + " TO " + userName);
            stmt.executeUpdate("ALTER DEFAULT PRIVILEGES IN SCHEMA " + schemaName + " GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO " + userName);
        }

        // Return schema and user names for future reference
        return schemaName + ":" + userName;
    }

    public static void dropSchemaAndUser(Connection connection, String schemaName, String userName) throws SQLException {
        // Drop schema and user after query execution
        String dropSchemaSQL = "DROP SCHEMA IF EXISTS " + schemaName + " CASCADE";
        String dropUserSQL = "DROP ROLE IF EXISTS " + userName;

        try (Statement stmt = connection.createStatement()) {
            stmt.executeUpdate(dropSchemaSQL);
            stmt.executeUpdate(dropUserSQL);
        }
    }

    public static List<Map<String, Object>> executeQuery(String username, String password, String schemaName, String query) {
        List<Map<String, Object>> result = new ArrayList<>();

        try (Connection connection = DatabaseConnection.getConnection(username, password)) {
            // Set the search path to the new schema to isolate the session
            String setSchemaSQL = "SET search_path TO " + schemaName;
            try (Statement stmt = connection.createStatement()) {
                stmt.executeUpdate(setSchemaSQL);
            }

            // Execute the student's query
            try (PreparedStatement stmt = connection.prepareStatement(query)) {
                boolean hasResultSet = stmt.execute();
                if (hasResultSet) {
                    try (ResultSet rs = stmt.getResultSet()) {
                        // Process the results
                        int columnCount = rs.getMetaData().getColumnCount();
                        while (rs.next()) {
                            Map<String, Object> row = new HashMap<>();
                            for (int i = 1; i <= columnCount; i++) {
                                row.put(rs.getMetaData().getColumnName(i), rs.getObject(i));
                            }
                            result.add(row);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }
    
    public static void main(String[] args) {
        // Read input query from a file specified in args
        if (args.length < 1) {
            System.out.println("Please provide the path to the query file as an argument.");
            return;
        }
        String filePath = args[0];
        
        // Get the connection to the main database
        try (Connection connection = DatabaseConnection.getConnection("postgres", "postgres")) {
            // Step 1: Create a new user and schema for isolation
            String isolationDetails = createIsolatedSchemaAndUser(connection);
            String[] details = isolationDetails.split(":");
            String schemaName = details[0];
            String userName = details[1];

            
            // Step 2: Read input query from the user
            Scanner scanner = new Scanner(System.in);
            StringBuilder queryBuilder = new StringBuilder();
            String line;
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                queryBuilder.append(line).append(" ");
            }
            scanner.close();
            
            // Step 3: Execute the test case using the isolated user and schema
            String testCase = queryBuilder.toString().trim();
            List<Map<String, Object>> results = executeQuery("postgres", "postgres", schemaName, testCase);

            // Step 4: Execute the query using the isolated user and schema
            String solution = new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8).trim();
            results.addAll(executeQuery(userName, "password", schemaName, solution));

            // Step 5: Drop the schema and user after execution
            dropSchemaAndUser(connection, schemaName, userName);

            ObjectMapper objectMapper = new ObjectMapper();
            try {
                String jsonResult = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(results);
                System.out.println(jsonResult);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
